#include <stdlib.h>
#include <GL/glut.h>
#include <iostream>
using namespace std;
#define janela_altura 600
#define janela_largura 600

void keyboard(unsigned char key, int x, int y);
void resize(GLsizei w, GLsizei h);
void display(void);
float xr = 1, yr = 1, trans = 110;

void movimentoSetas(int key, int x, int y) {
	switch (key) {
	case GLUT_KEY_UP:
		yr++;		
		cout << y << endl;
		glutPostRedisplay();
		break;
	case GLUT_KEY_DOWN:
		yr--;		
		cout << y << endl;
		glutPostRedisplay();
		break;
	case GLUT_KEY_LEFT:
		xr--;		
		cout << x << endl;
		glutPostRedisplay();
		break;
	case GLUT_KEY_RIGHT:
		xr++;		
		cout << x << endl;
		glutPostRedisplay();
		break;

	}
}

int main(int arcg, char** arcv)
{
	printf("Use as setas do teclado para movimentar");

	glutInit(&arcg, arcv);

	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);

	glutInitWindowSize(janela_altura, janela_largura);

	glutInitWindowPosition(10, 300);

	glutCreateWindow("Glut ColisÃ£o - Davi Calais Souza");

	glutKeyboardFunc(&keyboard);

	glutReshapeFunc(&resize);

	glutDisplayFunc(display);

	glutSpecialFunc(movimentoSetas);

	glutMainLoop();

	return EXIT_SUCCESS;

}

void keyboard(unsigned char key, int x, int y)
{
	switch (key) {
	case '\x1B':
		exit(EXIT_SUCCESS);
		break;
	}
}

void resize(GLsizei w, GLsizei h)
{
	if (h == 0)
		h = 1;

	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	if (w <= h) {
		gluOrtho2D(0.0f, janela_altura, 0.0f, janela_largura * h / w);
	}
	else {
		gluOrtho2D(0.0f, janela_altura * w / h, 0.0f, janela_largura);
	}
	glMatrixMode(GL_MODELVIEW);
}

void display() {

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	float trans = sqrt((xr * xr) + (yr * yr));
	if (trans <= 100) {
		glClearColor(0.0f, 0.0f, 1.0f, 0.0f);
	}
	else {
		glClearColor(0.0f, 1.0f, 1.0f, 0.0f);
	}
	glClear(GL_COLOR_BUFFER_BIT);
	glTranslatef(janela_altura / 2, janela_largura / 2, 0);

	GLfloat circ_pnt = 100;
	GLfloat ang, raioX = 50.0f, raioY = 50.0f;
	glBegin(GL_POLYGON);
	glColor3f(1.0f, 1.0f, 1.0f);
	for (int i = 0; i < circ_pnt; i++)
	{
		ang = (2 * 3.14 * i) / circ_pnt;
		glVertex2f(cos(ang) * raioX, sin(ang) * raioY);
		printf("%f    %f\n", cos(ang) * raioX, sin(ang) * raioY);

	}
	glEnd();

	glEnable(GL_POINT_SMOOTH);
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	glPushMatrix();

	glBegin(GL_POLYGON);
	glColor3f(1.0f, 0.0f, 1.0f);
	for (int i = 0; i < circ_pnt; i++)
	{
		ang = (2 * 3.14 * i) / circ_pnt;
		glVertex2f((cos(ang) * raioX) + xr, (sin(ang) * raioY) + yr);
		printf("%f    %f\n", cos(ang) * raioX, sin(ang) * raioY);

	}
	glEnd();

	glFlush();
	glutPostRedisplay();
	glutSwapBuffers();
}
